from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.remote.webdriver import WebDriver
from time import sleep
from typing import Dict, Any
from langchain_core.tools import tool
import logging
from .driver_management import get_driver
from .smart_operations import smart_click, smart_select_and_choose
from pydantic import BaseModel, Field
from enum import Enum

logger = logging.getLogger(__name__)

class Orientation(str, Enum):
    """打印方向枚举"""
    LANDSCAPE = "Landscape"
    PORTRAIT = "Portrait"

class SupportRaft(str, Enum):
    """支撑筏设置枚举"""
    ENABLED = "enabled"
    DISABLED = "disabled"

class PrintJobConfig(BaseModel):
    """打印任务配置"""
    indication: str = Field(default="", description="打印指示/类型")
    orientation: Orientation = Field(default=Orientation.LANDSCAPE, description="打印方向")
    support_raft: SupportRaft = Field(default=SupportRaft.DISABLED, description="支撑筏设置")
    printer: str = Field(default="", description="打印机名称")
    build_platform: str = Field(default="", description="构建平台")
    material: str = Field(default="", description="材料类型")
    layer_height: float = Field(default=0.1, description="层高")
    infill_density: int = Field(default=20, description="填充密度")
    print_speed: int = Field(default=60, description="打印速度")
    temperature: int = Field(default=200, description="打印温度")
    file_path: str = Field(default="", description="文件路径")

@tool
def create_new_print_job(param: dict) -> dict:
    """创建新的打印任务"""
    logger.info("[PrintJob] 创建新打印任务节点开始")
    print(f"[create_new_print_job] 调用参数: {param}")
    driver = get_driver()
    
    try:
        # 1. 点击 New Print Job 按钮
        new_job_result = smart_click.invoke({
            "param": {
                "selectors": [
                    {
                        "by": "xpath",
                        "value": "//button[contains(@class, 'btn-primary')]//div[contains(@class, 'btn-text') and contains(text(), 'New Print Job')]"
                    },
                    {
                        "by": "xpath",
                        "value": "//button[contains(., 'New Print Job')]"
                    }
                ],
                "wait": 10
            }
        })
        
        if new_job_result.get("status") != "success":
            raise Exception(f"点击 New Print Job 按钮失败: {new_job_result.get('message')}")
            
        print("[create_new_print_job] ✅ 成功点击 New Print Job 按钮")
        
        # 2. 等待并填写表单
        sleep(2)  # 等待表单加载
        
        # 3. 选择 Indication
        indication = param.get("indication", "")
        if indication:
            indication_result = smart_click.invoke({
                "param": {
                    "selectors": [
                        {
                            "by": "xpath",
                            "value": f"//div[contains(@class, 'type-name') and text()='{indication}']"
                        }
                    ],
                    "wait": 5
                }
            })
            if indication_result.get("status") != "success":
                raise Exception(f"选择 Indication 失败: {indication_result.get('message')}")
            
            # 验证是否选择成功
            try:
                selected_indication = WebDriverWait(driver, 2).until(
                    EC.presence_of_element_located((By.XPATH, f"//span[contains(@class, 'appliance-name') and text()='{indication}']"))
                )
                if not selected_indication.is_displayed():
                    raise Exception("Indication 选择后未显示")
                print(f"[create_new_print_job] ✅ 成功选择 Indication: {indication}")
            except Exception as e:
                raise Exception(f"Indication 选择验证失败: {str(e)}")
        
        # 4. 选择 Orientation
        orientation = param.get("orientation", "")
        if orientation:
            orientation_result = smart_click.invoke({
                "param": {
                    "selectors": [
                        {
                            "by": "xpath",
                            "value": f"//span[contains(.,'{orientation}')]"
                        }
                    ],
                    "wait": 5
                }
            })
            if orientation_result.get("status") != "success":
                raise Exception(f"选择 Orientation 失败: {orientation_result.get('message')}")
            
            # 验证是否选择成功
            try:
                selected_orientation = WebDriverWait(driver, 2).until(
                    EC.presence_of_element_located((By.XPATH, f"//div[contains(@class, 'info-container')]//span[contains(text(), '{orientation}')]"))
                )
                if not selected_orientation.is_displayed():
                    raise Exception("Orientation 选择后未显示")
                print(f"[create_new_print_job] ✅ 成功选择 Orientation: {orientation}")
            except Exception as e:
                raise Exception(f"Orientation 选择验证失败: {str(e)}")

        # 5. 选择 Printer
        printer = param.get("printer", "")
        if printer:
            printer_result = select_printer.invoke({
                "param": {
                    "printer": "MIDAS",
                    "printer_type": "virtual"
                }
            })
            if printer_result.get("status") != "success":
                raise Exception(f"选择 Printer 失败: {printer_result.get('message')}")


        sleep(4000)

        # 6. 设置 Support Raft
        support_raft = param.get("support_raft", False)
        if support_raft:
            raft_result = smart_click.invoke({
                "param": {
                    "selectors": [
                        {
                            "by": "xpath",
                            "value": "//div[contains(@class, 'support-raft-toggle')]//input[@type='checkbox']"
                        }
                    ],
                    "wait": 5
                }
            })
            if raft_result.get("status") != "success":
                raise Exception(f"设置 Support Raft 失败: {raft_result.get('message')}")
            
            # 验证是否设置成功
            try:
                raft_checkbox = WebDriverWait(driver, 2).until(
                    EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'support-raft-toggle')]//input[@type='checkbox']"))
                )
                if not raft_checkbox.is_selected():
                    raise Exception("Support Raft 设置后未选中")
                print("[create_new_print_job] ✅ 成功设置 Support Raft")
            except Exception as e:
                raise Exception(f"Support Raft 设置验证失败: {str(e)}")

        # 7. 选择 Build Platform
        build_platform = param.get("build_platform", "")
        if build_platform:
            platform_result = smart_click.invoke({
                "param": {
                    "selectors": [
                        {
                            "by": "xpath",
                            "value": f"//div[contains(@class, 'type-name') and text()='{build_platform}']"
                        },
                        {
                            "by": "xpath",
                            "value": f"//div[contains(@class, 'build-platform-select')]//div[text()='{build_platform}']"
                        }
                    ],
                    "wait": 5
                }
            })
            if platform_result.get("status") != "success":
                raise Exception(f"选择 Build Platform 失败: {platform_result.get('message')}")
            
            # 验证是否选择成功
            try:
                selected_platform = WebDriverWait(driver, 2).until(
                    EC.presence_of_element_located((By.XPATH, f"//div[contains(@class, 'type-name') and text()='{build_platform}']"))
                )
                if not selected_platform.is_displayed():
                    raise Exception("Build Platform 选择后未显示")
                print(f"[create_new_print_job] ✅ 成功选择 Build Platform: {build_platform}")
            except Exception as e:
                raise Exception(f"Build Platform 选择验证失败: {str(e)}")

        # 8. 选择 Material
        material = param.get("material", "")
        if material:
            material_result = smart_click.invoke({
                "param": {
                    "selectors": [
                        {
                            "by": "xpath",
                            "value": f"//div[contains(@class, 'type-name') and text()='{material}']"
                        },
                        {
                            "by": "xpath",
                            "value": f"//div[contains(@class, 'material-select')]//div[text()='{material}']"
                        }
                    ],
                    "wait": 5
                }
            })
            if material_result.get("status") != "success":
                raise Exception(f"选择 Material 失败: {material_result.get('message')}")
            
            # 验证是否选择成功
            try:
                selected_material = WebDriverWait(driver, 2).until(
                    EC.presence_of_element_located((By.XPATH, f"//div[contains(@class, 'type-name') and text()='{material}']"))
                )
                if not selected_material.is_displayed():
                    raise Exception("Material 选择后未显示")
                print(f"[create_new_print_job] ✅ 成功选择 Material: {material}")
            except Exception as e:
                raise Exception(f"Material 选择验证失败: {str(e)}")

        # 9. 高级设置
        advanced_settings = param.get("advanced_settings", {})
        if advanced_settings:
            # 点击高级设置按钮
            advanced_result = smart_click.invoke({
                "param": {
                    "selectors": [
                        {
                            "by": "xpath",
                            "value": "//button[contains(text(), 'Advanced')]"
                        },
                        {
                            "by": "xpath",
                            "value": "//button[contains(text(), '高级')]"
                        }
                    ],
                    "wait": 5
                }
            })
            
            if advanced_result.get("status") == "success":
                # 设置层高
                layer_height = advanced_settings.get("layer_height")
                if layer_height:
                    _set_layer_height(driver, layer_height)
                
                # 设置填充密度
                infill_density = advanced_settings.get("infill_density")
                if infill_density:
                    _set_infill_density(driver, infill_density)
                
                # 设置打印速度
                print_speed = advanced_settings.get("print_speed")
                if print_speed:
                    _set_print_speed(driver, print_speed)
                
                # 设置温度
                temperature = advanced_settings.get("temperature")
                if temperature:
                    _set_temperature(driver, temperature)

        # 10. 上传文件
        file_path = param.get("file_path", "")
        if file_path:
            upload_result = upload_local_file(file_path)
            if upload_result.get("status") != "success":
                raise Exception(f"文件上传失败: {upload_result.get('message')}")
            print(f"[create_new_print_job] ✅ 成功上传文件: {file_path}")

        print("[create_new_print_job] ✅ 打印任务创建完成")
        logger.info("[PrintJob] 创建新打印任务节点结束")
        return {
            "status": "success",
            "message": "打印任务创建完成",
            "config": param
        }
        
    except Exception as e:
        logger.error(f"❌ 创建打印任务失败: {str(e)}")
        return {
            "status": "error",
            "message": f"创建打印任务失败: {str(e)}"
        }

@tool
def select_printer(param: Dict[str, Any]) -> Dict[str, Any]:
    """选择打印机"""
    printer = param.get("printer", "").strip()
    printer_type = param.get("printer_type", "connected")
    match_by = param.get("match_by", "name")
    index = param.get("index", 0)
    wait_time = param.get("wait", 10)
    driver = get_driver()

    if not printer:
        return {"success": False, "message": "缺少 printer 参数"}

    logger.info(f"[select_printer] 参数: {param}")

    try:
        # 1. 打开下拉框
        dropdown = driver.find_element("xpath", "//printer-platform-list-v2//div[@class='position-relative']")
        dropdown.click()
        sleep(1)

        # 2. 构造定位器
        if printer_type == "virtual":
            base_xpath = "//mat-option//div[contains(@class, 'virtual-printer-container')]"
        else:
            base_xpath = "//mat-option//div[contains(@class, 'printer-container')]"

        all_elements = driver.find_elements("xpath", base_xpath)
        matched_elements = []
        logger.info("############################################")

        sleep(30)

        for el in all_elements:
            try:
                if printer_type == "virtual" and match_by == "image_src":
                    imgs = el.find_elements("tag name", "img")
                    for img in imgs:
                        if printer in img.get_attribute("src"):
                            matched_elements.append(el)
                            break
                elif match_by == "name":
                    name_div = el.find_element("class name", "printer-name")
                    logger.info(name_div)
                    if printer in name_div.text.strip():
                        matched_elements.append(el)
                elif match_by == "serial":
                    serial_div = el.find_element("class name", "printer-id")
                    if printer in serial_div.text.strip():
                        matched_elements.append(el)
            except Exception as e:
                logger.warning(f"[select_printer] 单个元素匹配失败: {e}")

        if not matched_elements:
            return {"success": False, "message": f"未找到匹配打印机: {printer}"}

        if index >= len(matched_elements):
            return {"success": False, "message": f"匹配到 {len(matched_elements)} 项，但 index={index} 越界"}

        target_el = matched_elements[index]
        driver.execute_script("arguments[0].scrollIntoView(true);", target_el)
        sleep(0.5)
        target_el.click()

        return {"success": True, "message": f"成功选择打印机: {printer}"}

    except Exception as e:
        logger.error(f"[select_printer] 异常: {e}")
        return {"success": False, "message": str(e)}

def _click_printer_dropdown(wait_time: int) -> dict:
    """点击打印机下拉框"""
    driver = get_driver()
    
    try:
        # 尝试多种选择器找到打印机下拉框
        dropdown_selectors = [
            {
                "by": "xpath",
                "value": "//div[contains(@class, 'printer-select')]//div[contains(@class, 'select-control')]"
            },
            {
                "by": "xpath",
                "value": "//div[contains(@class, 'printer-dropdown')]"
            },
            {
                "by": "css",
                "value": ".printer-select .select-control"
            }
        ]
        
        for selector in dropdown_selectors:
            try:
                element = WebDriverWait(driver, wait_time).until(
                    EC.element_to_be_clickable((By.XPATH if selector["by"] == "xpath" else By.CSS_SELECTOR, selector["value"]))
                )
                element.click()
                logger.info("✅ 打印机下拉框点击成功")
                return {"status": "success", "message": "打印机下拉框点击成功"}
            except TimeoutException:
                continue
        
        return {"status": "error", "message": "未找到打印机下拉框"}
        
    except Exception as e:
        return {"status": "error", "message": f"点击打印机下拉框失败: {str(e)}"}

def _select_connected_printer(printer: str, wait_time: int) -> dict:
    """选择已连接的打印机"""
    driver = get_driver()
    
    try:
        # 查找已连接的打印机
        printer_selectors = [
            {
                "by": "xpath",
                "value": f"//div[contains(@class, 'printer-item') and contains(text(), '{printer}')]"
            },
            {
                "by": "xpath",
                "value": f"//div[contains(@class, 'connected-printer') and contains(text(), '{printer}')]"
            }
        ]
        
        for selector in printer_selectors:
            try:
                element = WebDriverWait(driver, wait_time).until(
                    EC.element_to_be_clickable((By.XPATH, selector["value"]))
                )
                element.click()
                logger.info(f"✅ 成功选择已连接打印机: {printer}")
                return {"status": "success", "message": f"成功选择已连接打印机: {printer}"}
            except TimeoutException:
                continue
        
        return {"status": "error", "message": f"未找到已连接打印机: {printer}"}
        
    except Exception as e:
        return {"status": "error", "message": f"选择已连接打印机失败: {str(e)}"}

def _select_virtual_printer(printer: str, wait_time: int) -> dict:
    """选择虚拟打印机"""
    driver = get_driver()
    
    try:
        # 查找虚拟打印机
        printer_selectors = [
            {
                "by": "xpath",
                "value": f"//div[contains(@class, 'virtual-printer') and contains(text(), '{printer}')]"
            }
        ]
        
        for selector in printer_selectors:
            try:
                element = WebDriverWait(driver, wait_time).until(
                    EC.element_to_be_clickable((By.XPATH, selector["value"]))
                )
                element.click()
                logger.info(f"✅ 成功选择虚拟打印机: {printer}")
                return {"status": "success", "message": f"成功选择虚拟打印机: {printer}"}
            except TimeoutException:
                continue
        
        return {"status": "error", "message": f"未找到虚拟打印机: {printer}"}
        
    except Exception as e:
        return {"status": "error", "message": f"选择虚拟打印机失败: {str(e)}"}

def _set_layer_height(driver, layer_height: float):
    """设置层高"""
    try:
        # 查找层高输入框
        layer_height_input = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Layer Height') or contains(@placeholder, '层高')]"))
        )
        layer_height_input.clear()
        layer_height_input.send_keys(str(layer_height))
        logger.info(f"✅ 设置层高: {layer_height}")
    except Exception as e:
        logger.warning(f"⚠️ 设置层高失败: {str(e)}")

def _set_infill_density(driver, infill_density: int):
    """设置填充密度"""
    try:
        # 查找填充密度输入框
        infill_input = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Infill') or contains(@placeholder, '填充')]"))
        )
        infill_input.clear()
        infill_input.send_keys(str(infill_density))
        logger.info(f"✅ 设置填充密度: {infill_density}%")
    except Exception as e:
        logger.warning(f"⚠️ 设置填充密度失败: {str(e)}")

def _set_print_speed(driver, print_speed: int):
    """设置打印速度"""
    try:
        # 查找打印速度输入框
        speed_input = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Speed') or contains(@placeholder, '速度')]"))
        )
        speed_input.clear()
        speed_input.send_keys(str(print_speed))
        logger.info(f"✅ 设置打印速度: {print_speed}")
    except Exception as e:
        logger.warning(f"⚠️ 设置打印速度失败: {str(e)}")

def _set_temperature(driver, temperature: int):
    """设置温度"""
    try:
        # 查找温度输入框
        temp_input = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Temperature') or contains(@placeholder, '温度')]"))
        )
        temp_input.clear()
        temp_input.send_keys(str(temperature))
        logger.info(f"✅ 设置温度: {temperature}°C")
    except Exception as e:
        logger.warning(f"⚠️ 设置温度失败: {str(e)}")

def upload_local_file(file_path: str) -> Dict[str, Any]:
    """上传本地文件"""
    try:
        driver = get_driver()
        
        # 查找文件上传输入框
        file_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='file']"))
        )
        
        # 上传文件
        file_input.send_keys(file_path)
        
        # 等待上传完成
        sleep(3)
        
        logger.info(f"✅ 文件上传成功: {file_path}")
        return {
            "status": "success",
            "message": f"文件上传成功: {file_path}"
        }
        
    except Exception as e:
        logger.error(f"❌ 文件上传失败: {str(e)}")
        return {
            "status": "error",
            "message": f"文件上传失败: {str(e)}"
        }

@tool
def submit_print_job(**kwargs) -> Dict[str, Any]:
    """提交打印任务"""
    logger.info("🚀 提交打印任务")
    driver = get_driver()
    
    try:
        # 查找提交按钮
        submit_selectors = [
            (By.XPATH, "//button[contains(text(), 'Submit')]"),
            (By.XPATH, "//button[contains(text(), '提交')]"),
            (By.XPATH, "//button[contains(text(), 'Start Print')]"),
            (By.XPATH, "//button[contains(text(), '开始打印')]"),
            (By.CSS_SELECTOR, ".submit-button"),
            (By.CSS_SELECTOR, ".btn-primary")
        ]
        
        for by, value in submit_selectors:
            try:
                button = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((by, value))
                )
                button.click()
                logger.info("✅ 打印任务提交成功")
                return {
                    "status": "success",
                    "message": "打印任务提交成功"
                }
            except TimeoutException:
                continue
        
        return {
            "status": "error",
            "message": "未找到提交按钮"
        }
        
    except Exception as e:
        logger.error(f"❌ 提交打印任务失败: {str(e)}")
        return {
            "status": "error",
            "message": f"提交打印任务失败: {str(e)}"
        } 